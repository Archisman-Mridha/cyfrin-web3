/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  ERC20TokenContract,
  ERC20TokenContractInterface,
} from "../ERC20TokenContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_initialSupply",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Burn",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "burnFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200171c3803806200171c8339818101604052810190620000379190620002ac565b600360009054906101000a900460ff1660ff16600a620000589190620004c9565b836200006591906200051a565b600281905550600254600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160009081620000c29190620007a6565b508060019081620000d49190620007a6565b505050506200088d565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6200010781620000f2565b81146200011357600080fd5b50565b6000815190506200012781620000fc565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001828262000137565b810181811067ffffffffffffffff82111715620001a457620001a362000148565b5b80604052505050565b6000620001b9620000de565b9050620001c7828262000177565b919050565b600067ffffffffffffffff821115620001ea57620001e962000148565b5b620001f58262000137565b9050602081019050919050565b60005b838110156200022257808201518184015260208101905062000205565b60008484015250505050565b6000620002456200023f84620001cc565b620001ad565b90508281526020810184848401111562000264576200026362000132565b5b6200027184828562000202565b509392505050565b600082601f8301126200029157620002906200012d565b5b8151620002a38482602086016200022e565b91505092915050565b600080600060608486031215620002c857620002c7620000e8565b5b6000620002d88682870162000116565b935050602084015167ffffffffffffffff811115620002fc57620002fb620000ed565b5b6200030a8682870162000279565b925050604084015167ffffffffffffffff8111156200032e576200032d620000ed565b5b6200033c8682870162000279565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115620003d457808604811115620003ac57620003ab62000346565b5b6001851615620003bc5780820291505b8081029050620003cc8562000375565b94506200038c565b94509492505050565b600082620003ef5760019050620004c2565b81620003ff5760009050620004c2565b8160018114620004185760028114620004235762000459565b6001915050620004c2565b60ff84111562000438576200043762000346565b5b8360020a91508482111562000452576200045162000346565b5b50620004c2565b5060208310610133831016604e8410600b8410161715620004935782820a9050838111156200048d576200048c62000346565b5b620004c2565b620004a2848484600162000382565b92509050818404811115620004bc57620004bb62000346565b5b81810290505b9392505050565b6000620004d682620000f2565b9150620004e383620000f2565b9250620005127fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484620003dd565b905092915050565b60006200052782620000f2565b91506200053483620000f2565b92508282026200054481620000f2565b915082820484148315176200055e576200055d62000346565b5b5092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620005b857607f821691505b602082108103620005ce57620005cd62000570565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620006387fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620005f9565b620006448683620005f9565b95508019841693508086168417925050509392505050565b6000819050919050565b600062000687620006816200067b84620000f2565b6200065c565b620000f2565b9050919050565b6000819050919050565b620006a38362000666565b620006bb620006b2826200068e565b84845462000606565b825550505050565b600090565b620006d2620006c3565b620006df81848462000698565b505050565b5b818110156200070757620006fb600082620006c8565b600181019050620006e5565b5050565b601f82111562000756576200072081620005d4565b6200072b84620005e9565b810160208510156200073b578190505b620007536200074a85620005e9565b830182620006e4565b50505b505050565b600082821c905092915050565b60006200077b600019846008026200075b565b1980831691505092915050565b600062000796838362000768565b9150826002028217905092915050565b620007b18262000565565b67ffffffffffffffff811115620007cd57620007cc62000148565b5b620007d982546200059f565b620007e68282856200070b565b600060209050601f8311600181146200081e576000841562000809578287015190505b62000815858262000788565b86555062000885565b601f1984166200082e86620005d4565b60005b82811015620008585784890151825560018201915060208501945060208101905062000831565b8683101562000878578489015162000874601f89168262000768565b8355505b6001600288020188555050505b505050505050565b610e7f806200089d6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806342966c681161007157806342966c681461014057806370a082311461015c57806379cc67901461018c57806395d89b41146101a8578063a9059cbb146101c6578063dd62ed3e146101e2576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100e857806323b872dd14610106578063313ce56714610122575b600080fd5b6100b6610212565b6040516100c39190610b09565b60405180910390f35b6100e660048036038101906100e19190610bc4565b6102a0565b005b6100f061038a565b6040516100fd9190610c13565b60405180910390f35b610120600480360381019061011b9190610c2e565b610390565b005b61012a6104bc565b6040516101379190610c9d565b60405180910390f35b61015a60048036038101906101559190610cb8565b6104cf565b005b61017660048036038101906101719190610ce5565b6105db565b6040516101839190610c13565b60405180910390f35b6101a660048036038101906101a19190610bc4565b6105f3565b005b6101b061081c565b6040516101bd9190610b09565b60405180910390f35b6101e060048036038101906101db9190610bc4565b6108aa565b005b6101fc60048036038101906101f79190610d12565b6108b9565b6040516102099190610c13565b60405180910390f35b6000805461021f90610d81565b80601f016020809104026020016040519081016040528092919081815260200182805461024b90610d81565b80156102985780601f1061026d57610100808354040283529160200191610298565b820191906000526020600020905b81548152906001019060200180831161027b57829003601f168201915b505050505081565b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161037e9190610c13565b60405180910390a35050565b60025481565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111561041957600080fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104a59190610de1565b925050819055506104b78383836108de565b505050565b600360009054906101000a900460ff1681565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561051b57600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461056a9190610de1565b9250508190555080600260008282546105839190610de1565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040516105d09190610c13565b60405180910390a250565b60046020528060005260406000206000915090505481565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561063f57600080fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111156106c857600080fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107179190610de1565b9250508190555080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107aa9190610de1565b9250508190555080600260008282546107c39190610de1565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040516108109190610c13565b60405180910390a25050565b6001805461082990610d81565b80601f016020809104026020016040519081016040528092919081815260200182805461085590610d81565b80156108a25780601f10610877576101008083540402835291602001916108a2565b820191906000526020600020905b81548152906001019060200180831161088557829003601f168201915b505050505081565b6108b53383836108de565b5050565b6005602052816000526040600020602052806000526040600020600091509150505481565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361091757600080fd5b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561096357600080fd5b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109b29190610de1565b9250508190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a089190610e15565b925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610a6c9190610c13565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ab3578082015181840152602081019050610a98565b60008484015250505050565b6000601f19601f8301169050919050565b6000610adb82610a79565b610ae58185610a84565b9350610af5818560208601610a95565b610afe81610abf565b840191505092915050565b60006020820190508181036000830152610b238184610ad0565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b5b82610b30565b9050919050565b610b6b81610b50565b8114610b7657600080fd5b50565b600081359050610b8881610b62565b92915050565b6000819050919050565b610ba181610b8e565b8114610bac57600080fd5b50565b600081359050610bbe81610b98565b92915050565b60008060408385031215610bdb57610bda610b2b565b5b6000610be985828601610b79565b9250506020610bfa85828601610baf565b9150509250929050565b610c0d81610b8e565b82525050565b6000602082019050610c286000830184610c04565b92915050565b600080600060608486031215610c4757610c46610b2b565b5b6000610c5586828701610b79565b9350506020610c6686828701610b79565b9250506040610c7786828701610baf565b9150509250925092565b600060ff82169050919050565b610c9781610c81565b82525050565b6000602082019050610cb26000830184610c8e565b92915050565b600060208284031215610cce57610ccd610b2b565b5b6000610cdc84828501610baf565b91505092915050565b600060208284031215610cfb57610cfa610b2b565b5b6000610d0984828501610b79565b91505092915050565b60008060408385031215610d2957610d28610b2b565b5b6000610d3785828601610b79565b9250506020610d4885828601610b79565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610d9957607f821691505b602082108103610dac57610dab610d52565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dec82610b8e565b9150610df783610b8e565b9250828203905081811115610e0f57610e0e610db2565b5b92915050565b6000610e2082610b8e565b9150610e2b83610b8e565b9250828201905080821115610e4357610e42610db2565b5b9291505056fea264697066735822122011ff4142da957a2da14e60194b5678953a709d76e74822f595e504f83e9ec7c364736f6c63430008110033";

type ERC20TokenContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20TokenContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20TokenContract__factory extends ContractFactory {
  constructor(...args: ERC20TokenContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _initialSupply: PromiseOrValue<BigNumberish>,
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20TokenContract> {
    return super.deploy(
      _initialSupply,
      _name,
      _symbol,
      overrides || {}
    ) as Promise<ERC20TokenContract>;
  }
  override getDeployTransaction(
    _initialSupply: PromiseOrValue<BigNumberish>,
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _initialSupply,
      _name,
      _symbol,
      overrides || {}
    );
  }
  override attach(address: string): ERC20TokenContract {
    return super.attach(address) as ERC20TokenContract;
  }
  override connect(signer: Signer): ERC20TokenContract__factory {
    return super.connect(signer) as ERC20TokenContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20TokenContractInterface {
    return new utils.Interface(_abi) as ERC20TokenContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20TokenContract {
    return new Contract(address, _abi, signerOrProvider) as ERC20TokenContract;
  }
}
