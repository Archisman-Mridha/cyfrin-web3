/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace MarketplaceContract {
  export type NFTDetailsStruct = {
    price: PromiseOrValue<BigNumberish>;
    seller: PromiseOrValue<string>;
  };

  export type NFTDetailsStructOutput = [BigNumber, string] & {
    price: BigNumber;
    seller: string;
  };
}

export interface MarketplaceContractInterface extends utils.Interface {
  functions: {
    "buyNFT(address,uint256)": FunctionFragment;
    "getNFTDetails(address,uint256)": FunctionFragment;
    "getTotalEarning(address)": FunctionFragment;
    "listNFT(address,uint256,uint256)": FunctionFragment;
    "unlistNFT(address,uint256)": FunctionFragment;
    "updateNFTPrice(address,uint256,uint256)": FunctionFragment;
    "withdrawEarning()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyNFT"
      | "getNFTDetails"
      | "getTotalEarning"
      | "listNFT"
      | "unlistNFT"
      | "updateNFTPrice"
      | "withdrawEarning"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyNFT",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTDetails",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalEarning",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listNFT",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unlistNFT",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNFTPrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEarning",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "buyNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNFTDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalEarning",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlistNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateNFTPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEarning",
    data: BytesLike
  ): Result;

  events: {
    "NFTSold(address,address,uint256,uint256)": EventFragment;
    "NFTUnlisted(address,address,uint256)": EventFragment;
    "NewNFTListed(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NFTSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTUnlisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewNFTListed"): EventFragment;
}

export interface NFTSoldEventObject {
  buyer: string;
  nftContract: string;
  nftId: BigNumber;
  price: BigNumber;
}
export type NFTSoldEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  NFTSoldEventObject
>;

export type NFTSoldEventFilter = TypedEventFilter<NFTSoldEvent>;

export interface NFTUnlistedEventObject {
  seller: string;
  nftContract: string;
  nftId: BigNumber;
}
export type NFTUnlistedEvent = TypedEvent<
  [string, string, BigNumber],
  NFTUnlistedEventObject
>;

export type NFTUnlistedEventFilter = TypedEventFilter<NFTUnlistedEvent>;

export interface NewNFTListedEventObject {
  seller: string;
  nftContract: string;
  nftId: BigNumber;
  price: BigNumber;
}
export type NewNFTListedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  NewNFTListedEventObject
>;

export type NewNFTListedEventFilter = TypedEventFilter<NewNFTListedEvent>;

export interface MarketplaceContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyNFT(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getNFTDetails(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MarketplaceContract.NFTDetailsStructOutput]>;

    getTotalEarning(
      seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    listNFT(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlistNFT(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateNFTPrice(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      updatedPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawEarning(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  buyNFT(
    nftContract: PromiseOrValue<string>,
    nftId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getNFTDetails(
    nftContract: PromiseOrValue<string>,
    nftId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MarketplaceContract.NFTDetailsStructOutput>;

  getTotalEarning(
    seller: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  listNFT(
    nftContract: PromiseOrValue<string>,
    nftId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlistNFT(
    nftContract: PromiseOrValue<string>,
    nftId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateNFTPrice(
    nftContract: PromiseOrValue<string>,
    nftId: PromiseOrValue<BigNumberish>,
    updatedPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawEarning(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyNFT(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getNFTDetails(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MarketplaceContract.NFTDetailsStructOutput>;

    getTotalEarning(
      seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listNFT(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unlistNFT(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateNFTPrice(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      updatedPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawEarning(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "NFTSold(address,address,uint256,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      nftContract?: PromiseOrValue<string> | null,
      nftId?: PromiseOrValue<BigNumberish> | null,
      price?: null
    ): NFTSoldEventFilter;
    NFTSold(
      buyer?: PromiseOrValue<string> | null,
      nftContract?: PromiseOrValue<string> | null,
      nftId?: PromiseOrValue<BigNumberish> | null,
      price?: null
    ): NFTSoldEventFilter;

    "NFTUnlisted(address,address,uint256)"(
      seller?: PromiseOrValue<string> | null,
      nftContract?: PromiseOrValue<string> | null,
      nftId?: PromiseOrValue<BigNumberish> | null
    ): NFTUnlistedEventFilter;
    NFTUnlisted(
      seller?: PromiseOrValue<string> | null,
      nftContract?: PromiseOrValue<string> | null,
      nftId?: PromiseOrValue<BigNumberish> | null
    ): NFTUnlistedEventFilter;

    "NewNFTListed(address,address,uint256,uint256)"(
      seller?: PromiseOrValue<string> | null,
      nftContract?: PromiseOrValue<string> | null,
      nftId?: PromiseOrValue<BigNumberish> | null,
      price?: null
    ): NewNFTListedEventFilter;
    NewNFTListed(
      seller?: PromiseOrValue<string> | null,
      nftContract?: PromiseOrValue<string> | null,
      nftId?: PromiseOrValue<BigNumberish> | null,
      price?: null
    ): NewNFTListedEventFilter;
  };

  estimateGas: {
    buyNFT(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getNFTDetails(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalEarning(
      seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listNFT(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlistNFT(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateNFTPrice(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      updatedPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawEarning(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyNFT(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getNFTDetails(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalEarning(
      seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listNFT(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlistNFT(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateNFTPrice(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      updatedPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEarning(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
